{"version":3,"file":"main.6ff7736c43eaf653ad37.bundle.js","sources":["webpack:///../datalith-gridmap/dist/utils/geometry.js"],"sourcesContent":["export function isPointInsidePolygon(point, polygon) {\n    // ray-casting algorithm based on\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n    var x = point[0];\n    var y = point[1];\n    var inside = false;\n    var j = polygon.length - 1;\n    for (var i = 0, end = polygon.length - 1, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {\n        var xi = polygon[i][0];\n        var yi = polygon[i][1];\n        var xj = polygon[j][0];\n        var yj = polygon[j][1];\n        var intersect = yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n        j = i;\n    }\n    return inside;\n}\nexport function flatGeometry(geometry) {\n    var flattenPolygon = function (coords) {\n        return coords.reduce(function (accumulator, currentValue) {\n            return accumulator.concat([[0, 0]].concat(currentValue));\n        });\n    };\n    var result = [];\n    switch (geometry.type) {\n        case 'Polygon':\n            result = flattenPolygon(geometry.coordinates);\n            break;\n        case 'MultiPolygon':\n            result = flattenPolygon(geometry.coordinates.map(function (coordinates) { return flattenPolygon(coordinates); }));\n            break;\n        default:\n            throw new Error(\"Found incompatible 'geometry.type' for GeoJson: Type '\" + geometry.type + \"' is not supported\");\n    }\n    return [[0, 0]].concat(result.concat([[0, 0]]));\n}\n//# sourceMappingURL=geometry.js.map"],"mappings":"AAAA","sourceRoot":""}